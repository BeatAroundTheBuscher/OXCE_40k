extended:
  tags:
    RuleArmor:
      ARMOR_IS_CREWED_WEAPON: int
      ARMOR_CREWED_WEAPON_CAN_BE_PUSHED: int
      ARMOR_CREWED_WEAPON_CAN_BE_DISASSEMBLED: int

    RuleItem:
      ITEM_INTERACTS_WITH_CREWED_WEAPONS: int

    BattleGame:
      GAME_CREWED_WEAPON_CURRENT_ID: int
      GAME_CREWED_WEAPON_CURRENT_BIT_ID: int
      GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_FIRING: int
      GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_REACTIONS: int

    BattleUnit:
      UNIT_IS_USING_CREWED_WEAPON: int
      UNIT_CREWED_WEAPON_ID: int
      UNIT_CREWED_WEAPON_EXPERIENCE_FIRING: int
      UNIT_CREWED_WEAPON_EXPERIENCE_REACTIONS: int

  scripts:
    createUnit:
#*** Crewed weapons should have 0 energy so they only move when "pushed" ***
      - offset: 10
        code: |
          var ptr RuleArmor turretArmor;
          var int checkedTag;

          unit.getRuleArmor turretArmor;
          turretArmor.getTag checkedTag Tag.ARMOR_IS_CREWED_WEAPON;

          if neq 0 checkedTag;

            unit.setEnergy 0;

          end;

          return;

    newTurnUnit:
#*** Handles counting experience from crewed weapons ***
      - offset: 10
        code: |
          var int unitIsUsingCrewedWeapon;
          var int gameCrewedWeaponExperienceBitCounter;
          var int unitCrewedWeaponExperience;

          unit.getTag unitIsUsingCrewedWeapon Tag.UNIT_IS_USING_CREWED_WEAPON;
          if neq 0 unitIsUsingCrewedWeapon;

            battle_game.getTag gameCrewedWeaponExperienceBitCounter Tag.GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_FIRING;
            bit_and unitIsUsingCrewedWeapon gameCrewedWeaponExperienceBitCounter;
            if neq 0 unitIsUsingCrewedWeapon;

              unit.getTag unitCrewedWeaponExperience Tag.UNIT_CREWED_WEAPON_EXPERIENCE_FIRING;
              add unitCrewedWeaponExperience 1;
              unit.setTag Tag.UNIT_CREWED_WEAPON_EXPERIENCE_FIRING unitCrewedWeaponExperience;

            end;

            battle_game.getTag gameCrewedWeaponExperienceBitCounter Tag.GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_REACTIONS;
            bit_and unitIsUsingCrewedWeapon gameCrewedWeaponExperienceBitCounter;
            if neq 0 unitIsUsingCrewedWeapon;

              unit.getTag unitCrewedWeaponExperience Tag.UNIT_CREWED_WEAPON_EXPERIENCE_REACTIONS;
              add unitCrewedWeaponExperience 1;
              unit.setTag Tag.UNIT_CREWED_WEAPON_EXPERIENCE_REACTIONS unitCrewedWeaponExperience;

            end;

          end;

          return;

#*** Handles resetting crewed weapons ***
      - offset: 11
        code: |
          var ptr RuleArmor turretArmor;
          var int checkedTag;

          # Validation:
          #   1. Player's turn
          if neq 0 side;

            return;

          end;

          # Reset crewed weapon accuracy and reactions, and energy
          unit.getRuleArmor turretArmor;
          turretArmor.getTag checkedTag Tag.ARMOR_IS_CREWED_WEAPON;
          if neq 0 checkedTag;

            unit.Stats.setFiring 0;
            unit.Stats.setReactions 0;
            unit.setEnergy 0;

          end;

          # Reset tags on crewed weapons and soldiers
          unit.setTag Tag.UNIT_CREWED_WEAPON_ID 0;
          unit.setTag Tag.UNIT_IS_USING_CREWED_WEAPON 0;

          return;

#*** Handles resetting BattleGame tags for crewed weapons ***
#*** Using newTurnItem since it runs after newTurnUnit, which would reset these tags after the first unit otherwise
    newTurnItem:
      - offset: 10
        code: |
          # Validation:
          #   1. Player's turn
          if neq 0 side;

            return;

          end;

          battle_game.setTag Tag.GAME_CREWED_WEAPON_CURRENT_ID 0;
          battle_game.setTag Tag.GAME_CREWED_WEAPON_CURRENT_BIT_ID 1;
          battle_game.setTag Tag.GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_FIRING 0;
          battle_game.setTag Tag.GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_REACTIONS 0;

          return;

    hitUnit:
#*** Counts for experience tags when a crewed weapon hits a target ***
      - offset: 10
        code: |
          var int crewedWeaponID;
          var int gameCrewedWeaponExperienceBitCounter;

          attacker.getTag crewedWeaponID Tag.UNIT_CREWED_WEAPON_ID;
          battle_game.getTag gameCrewedWeaponExperienceBitCounter Tag.GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_FIRING;

          bit_or gameCrewedWeaponExperienceBitCounter crewedWeaponID;
          battle_game.setTag Tag.GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_FIRING gameCrewedWeaponExperienceBitCounter;

          return power part side;

#*** Handles interactions with crewed weapons ***
      - offset: 11
        code: |
          var ptr RuleArmor turretArmor;
          var ptr RuleItem interactingItem;
          var ptr RuleSoldier interactingSoldier;
          var int unitIsCrewedWeapon;
          var int itemInteractsWithCrewedWeapons;
          var int currentTurn; # Needs counting of factions
          var int crewedWeaponID;
          var int soldierIsKneeling;
          var int crewedWeaponCanBePushed;
          var int transferStats;
          var int maxStats;
          var int soldierStrength;

          # Validation step:
          #   1. unit must be a crewed weapon
          #   2. action must be melee
          #   3. 'attacking unit' must be a soldier
          #   4. action must occur during player's turn <-- not implemented yet
          #   5. crewed weapon must not already be in-use
          unit.getRuleArmor turretArmor;
          turretArmor.getTag unitIsCrewedWeapon Tag.ARMOR_IS_CREWED_WEAPON;

          attacker.getRuleSoldier interactingSoldier;

          unit.getTag crewedWeaponID Tag.UNIT_CREWED_WEAPON_ID;

          if or eq 0 unitIsCrewedWeapon neq battle_action battle_action_hit eq null interactingSoldier neq 0 crewedWeaponID;

            return power part side;

          end;

          # Determine what kind of interaction we're doing:
          # 1. Tools for assembling/disassembling turrets - handle in damageUnit
          # 2. Stand + hit - "push" the weapon emplacement
          # 3. Kneel + hit - use the weapon emplacement

          weapon_item.getRuleItem interactingItem;
          interactingItem.getTag itemInteractsWithCrewedWeapons Tag.ITEM_INTERACTS_WITH_CREWED_WEAPONS;
          attacker.isKneeled soldierIsKneeling;
          turretArmor.getTag crewedWeaponCanBePushed Tag.ARMOR_CREWED_WEAPON_CAN_BE_PUSHED;

          if neq 0 itemInteractsWithCrewedWeapons;

            return power part side;

          else or neq 0 soldierIsKneeling eq 0 crewedWeaponCanBePushed;

            # We have a valid interaction between soldier and crewed weapon - initialize the weapon and immobilize the soldier
            # Set the ID tags on the soldier and the crewed weapon
            battle_game.getTag crewedWeaponID Tag.GAME_CREWED_WEAPON_CURRENT_ID;
            # Limit to only 31 interactions (max of bitwise operations)
            if gt crewedWeaponID 30;

              return 0 part side;

            end;
            add crewedWeaponID 1; # increment beforehand since it might be set to 1
            battle_game.setTag Tag.GAME_CREWED_WEAPON_CURRENT_ID crewedWeaponID;

            battle_game.getTag crewedWeaponID Tag.GAME_CREWED_WEAPON_CURRENT_BIT_ID;
            if eq 0 crewedWeaponID; # ensure we're setting a bit

              set crewedWeaponID 1;

            end;

            unit.setTag Tag.UNIT_CREWED_WEAPON_ID crewedWeaponID;
            attacker.setTag Tag.UNIT_IS_USING_CREWED_WEAPON crewedWeaponID;

            shl crewedWeaponID 1;
            battle_game.setTag Tag.GAME_CREWED_WEAPON_CURRENT_BIT_ID crewedWeaponID;

            # Set time units on the turret and set soldier TUs to 0
            attacker.getTimeUnits transferStats;
            attacker.getTimeUnitsMax maxStats;
            muldiv transferStats 100 maxStats;

            # If the soldier has >50%, set to 100% on the turret, otherwise 50%
            if gt transferStats 50;

              set transferStats 100;

            else;

              set transferStats 50;

            end;

            unit.getTimeUnitsMax maxStats;
            muldiv maxStats transferStats 100;
            unit.setTimeUnits maxStats;
            attacker.setTimeUnits 0;

            # Once we're using the weapon, it shouldn't move again
            unit.setEnergy 0;

            # Copy soldier's firing accuracy and reactions to the crewed weapon
            attacker.Stats.getFiring transferStats;
            unit.Stats.setFiring transferStats;

            attacker.Stats.getReactions transferStats;
            unit.Stats.setReactions transferStats;

          else neq 0 crewedWeaponCanBePushed;

            # Check the crewed weapon's TUs - you can't just whack the turret multiple times and send it across the map
            unit.getTimeUnits transferStats;
            if lt transferStats 7;

              # We'll give max push at 50 strength for 20 TUs, guarantee at least 8 TUs
              attacker.Stats.getStrength soldierStrength;
              muldiv soldierStrength 20 50;
              limit soldierStrength 8 20;

              add transferStats soldierStrength;
              unit.setTimeUnits soldierStrength;

              # Gain half the energy as TUs in order to move
              div soldierStrength 2;
              unit.getEnergy transferStats;
              add transferStats soldierStrength;
              unit.setEnergy transferStats;

            end;

          end;

          return 0 part side;

#      - offset: 12
#*** Find a way to set ammo by melee? Leaving this out for now
#        code: |
#          var ptre BattleItem turretWeapon;
#          var int ammoQuantity;
#
#          unit.getRightHandWeapon turretWeapon;
#          turretWeapon.getAmmoQuantity ammoQuantity;
#
#          debug_log 0 ammoQuantity;
#
#          return power part side;

    damageUnit:
#*** Prevents soldiers who are using crew-served weapons from getting TUs back ***
      - offset: 10
        code: |
          var int unitIsUsingCrewedWeapon;

          unit.getTag unitIsUsingCrewedWeapon Tag.UNIT_IS_USING_CREWED_WEAPON;
          if neq 0 unitIsUsingCrewedWeapon;

            set to_time 0;

          end;

          return;

#*** Handles using crewed weapon interaction items to assemble/disassemble crewed weapons
      - offset: 11
        code: |
          var ptr RuleArmor turretArmor;
          var ptr RuleItem interactingItem;
          var int unitIsCrewedWeapon;
          var int itemInteractsWithCrewedWeapons;
          var int crewedWeaponCanBeDisassembled;

          # First-level validation: is the unit a crewed weapon?
          unit.getRuleArmor turretArmor;
          turretArmor.getTag unitIsCrewedWeapon Tag.ARMOR_IS_CREWED_WEAPON;

          if eq 0 unitIsCrewedWeapon;

            return;

          end;

          # Crewed weapons don't get TUs or energy from damage methods
          set to_time 0;
          set to_energy 0;
          set to_wound 0;

          # Second-level validation: does the item interact with crewed weapons?
          weapon_item.getRuleItem interactingItem;
          interactingItem.getTag itemInteractsWithCrewedWeapons Tag.ITEM_INTERACTS_WITH_CREWED_WEAPONS;
          turretArmor.getTag crewedWeaponCanBeDisassembled Tag.ARMOR_CREWED_WEAPON_CAN_BE_DISASSEMBLED;

          if or eq 0 itemInteractsWithCrewedWeapons eq 0 crewedWeaponCanBeDisassembled;

            # Check if this was a push or if the weapon can be set up/broken down

            return;

          end;

          # If the attack was a melee, the turret must already be assembled, so disassembly time (stun)
          # If it's a ranged attack, then assemble it (revive)
          if eq battle_action battle_action_hit;

            set to_health 0;
            unit.getHealthMax to_stun;
            unit.getTimeUnitsMax to_time;
            unit.getHealthMax to_energy;

          else;

            set to_health 0;
            unit.getHealthMax to_stun;
            muldiv to_stun 4 -1; # make sure it wakes up!
            unit.getTimeUnitsMax to_time;
            unit.getHealthMax to_energy;

          end;

          return;

#    reactionUnitReaction:
#*** Awards experience for reacting with a crewed weapon *** (disabled since reaction scripts are read-only)
#      - offset: 10
#        code: |
#          var ptr RuleArmor turretArmor;
#          var int unitIsCrewedWeapon;
#          var int crewedWeaponID;
#          var int gameCrewedWeaponExperienceBitCounter;
#
#          reaction_unit.getRuleArmor turretArmor;
#          turretArmor.getTag unitIsCrewedWeapon Tag.ARMOR_IS_CREWED_WEAPON;
#          reaction_unit.getTag crewedWeaponID Tag.UNIT_CREWED_WEAPON_ID;
#
#          if and neq 0 unitIsCrewedWeapon neq 0 crewedWeaponID;
#
#            battle_game.getTag gameCrewedWeaponExperienceBitCounter Tag.GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_REACTIONS;
#            bit_or gameCrewedWeaponExperienceBitCounter crewedWeaponID;
#            battle_game.setTag Tag.GAME_CREWED_WEAPON_EXPERIENCE_BIT_COUNTER_REACTIONS gameCrewedWeaponExperienceBitCounter;
#
#          end;
#
#          return reaction_chance;

    returnFromMissionUnit:
#*** Adds the experience gained from crewed weapons ***
      - offset: 10
        code: |
          var ptr RuleSoldier soldierRuleset;
          var int unitCrewedWeaponExperience;
          var int currentStat;
          var int cappedStat;
          var int statGainLowerBound;
          var int statGain;

          unit.getRuleSoldier soldierRuleset;
          if neq null soldierRuleset;

            unit.getTag unitCrewedWeaponExperience Tag.UNIT_CREWED_WEAPON_EXPERIENCE_FIRING;

            if neq 0 unitCrewedWeaponExperience;

              soldierRuleset.StatsCap.getFiring cappedStat;
              soldier.Stats.getFiring currentStat;
              if lt currentStat cappedStat;

                # If at least 3 experience, ensure a gain of +1 or more
                set statGainLowerBound unitCrewedWeaponExperience;
                div statGainLowerBound 3;
                limit statGainLowerBound 0 1;

                # Cap gain at +3
                limit unitCrewedWeaponExperience 1 3;

                # RNG roll
                battle_game.randomRange statGain statGainLowerBound unitCrewedWeaponExperience;

                add currentStat statGain;
                soldier.Stats.setFiring currentStat;

              end;

            end;

            unit.getTag unitCrewedWeaponExperience Tag.UNIT_CREWED_WEAPON_EXPERIENCE_REACTIONS;

            if neq 0 unitCrewedWeaponExperience;

              soldierRuleset.StatsCap.getReactions cappedStat;
              soldier.Stats.getReactions currentStat;
              if lt currentStat cappedStat;

                # If at least 3 experience, ensure a gain of +1 or more
                set statGainLowerBound unitCrewedWeaponExperience;
                div statGainLowerBound 3;
                limit statGainLowerBound 0 1;

                # Cap gain at +3
                limit unitCrewedWeaponExperience 1 3;

                # RNG roll
                battle_game.randomRange statGain statGainLowerBound unitCrewedWeaponExperience;

                add currentStat statGain;
                soldier.Stats.setReactions currentStat;

              end;

            end;

          end;

          return;

armors:
  - type: STR_GORGON_HEAVY_STUBBER_LEFT_ARMOR
    tags:
      ARMOR_IS_CREWED_WEAPON: 1

  - type: STR_GORGON_HEAVY_STUBBER_RIGHT_ARMOR
    tags:
      ARMOR_IS_CREWED_WEAPON: 1